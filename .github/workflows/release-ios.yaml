name: CD - Release - iOS

on:
  # push:
  #   # tags:
  #   #   - v*
  #   branches:
  #     - ios-ci
  release:
    types: [prereleased, released]

# echo ${{ github.event.release.tag_name }} -> tagname
# echo ${{ github.event.release.prerelease }} -> true,false (${{ github.event.release.prerelease == true }})
# echo '${{ github.event.release.name }}' -> title
# echo '${{ github.event.release.body }}' -> body

env:
  CI: false
  #Github ENVs
  IOS_BUNDLE_ID: ${{ vars.IOS_BUNDLE_ID }}
  IOS_DEVELOPMENT_TEAM_ID: ${{ vars.IOS_DEVELOPMENT_TEAM_ID }}
  IOS_APPSTORECONNECT_AUTH_KEY_BASE64: ${{ secrets.IOS_APPSTORECONNECT_AUTH_KEY_BASE64 }}
  IOS_APPSTORECONNECT_API_KEY: ${{ secrets.IOS_APPSTORECONNECT_API_KEY }}
  IOS_APPSTORECONNECT_API_ISSUER: ${{ vars.IOS_APPSTORECONNECT_API_ISSUER }}
  IOS_APP_APPLE_ID: ${{ vars.IOS_APP_APPLE_ID }}
  #Workflow ENVs
  APPSTORECONNECT_AUTH_KEY_PATH: /Users/runner/private_keys
  MOBILE_PROVISIONING_PATH: ~/Library/MobileDevice/Provisioning\ Profiles
  SIGNING_CERTIFICATE_PATH: ${{ github.workspace }}/ios/App/signing-certificate.p12
  BUILDING_PATH: ${{ github.workspace }}/ios/App/build/Socious Wallet.ipa
  KEYCHAIN_PATH: ${{ github.workspace }}/ios/keychain/app-signing.keychain-db
  KEYCHAIN_PASSWORD: keychain_password

jobs:
  build-ios:
    name: Building iOS
    outputs:
      LATEST_APPSTORE_BUILD_NUMBER: ${{ steps.build-number.outputs.LATEST_APPSTORE_BUILD_NUMBER }}
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Node.js dependencies
        run: |
          npm cache clean --force
          npm ci

      - name: Making iOS Release Code
        run: |
          npm run build
          npx cap sync ios
        env:
          REACT_APP_SECRET_KEY: ${{ secrets.REACT_APP_SECRET_KEY }}
          REACT_APP_PLUTO_PASSWD: ${{ secrets.REACT_APP_PLUTO_PASSWD }}
          REACT_APP_PLUTO_DB_NAME: ${{ secrets.REACT_APP_PLUTO_DB_NAME }}
          REACT_APP_MEDIATOR_DID: ${{ secrets.REACT_APP_MEDIATOR_DID }}
          REACT_APP_BACKUP_AGENT: ${{ vars.REACT_APP_BACKUP_AGENT }}
          REACT_APP_BACKUP_AGENT_API_KEY: ${{ secrets.REACT_APP_BACKUP_AGENT_API_KEY }}
          REACT_APP_VERIFF_API_KEY: ${{ secrets.REACT_APP_VERIFF_API_KEY }}
          REACT_APP_DATADOG_APP_ID: ${{ secrets.REACT_APP_DATADOG_APP_ID }}
          REACT_APP_DATADOG_CLIENT_TOKEN: ${{ secrets.REACT_APP_DATADOG_CLIENT_TOKEN }}
          REACT_APP_PLATFORM: ios

      - name: Extracting App Version
        run: |
          echo "APP_VERSION=$(echo '${{ github.event.release.tag_name }}' | cut -c2-)" >> $GITHUB_ENV

      - name: Extracting provisioning profile (Distribution)
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }} | base64 --decode > ${{env.MOBILE_PROVISIONING_PATH}}/socious-wallet-provisioing-profile-distribution-appstore.mobileprovision

      - name: Extracting auth key file (Apple API)
        run: |
          KEY_PATH=${{ env.APPSTORECONNECT_AUTH_KEY_PATH }}
          API_KEY=${{ env.IOS_APPSTORECONNECT_API_KEY }}
          KEY_FILE_PATH=$KEY_PATH/AuthKey_$API_KEY.p8

          mkdir -p $KEY_PATH
          echo ${{ env.IOS_APPSTORECONNECT_AUTH_KEY_BASE64 }} | base64 --decode > $KEY_FILE_PATH

      - name: Extracting signing certificate
        run: |
          echo ${{ secrets.IOS_DISTRIBUTION_CERT_BASE64 }} | base64 --decode > $SIGNING_CERTIFICATE_PATH

      - name: Extracting and Installing signing certificate (.p12)
        run: |
          SIGNING_CERTIFICATE_PATH=${{ env.SIGNING_CERTIFICATE_PATH }}
          KEYCHAIN_PATH=${{ env.KEYCHAIN_PATH }}
          KEYCHAIN_PASSWORD=${{ env.KEYCHAIN_PASSWORD }}
          P12_PASSWORD=${{ secrets.IOS_DISTRIBUTION_CERT_PASSWORD }}

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $SIGNING_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Adding Provisioning Profile UUID to Github Env
        run: |
          echo "MOBILE_PROVISIONING_UUID=$(security cms -D -i ${{env.MOBILE_PROVISIONING_PATH}}/socious-wallet-provisioing-profile-distribution-appstore.mobileprovision | grep UUID -A1 -m1 | grep string | sed -e 's/<string>//' -e 's/<\/string>//' | xargs)" > $GITHUB_ENV

      - name: Fetching the Appstore Connect latest build number and increment
        id: build-number
        env:
          APP_STORE_CONNECT_ISSUER_ID: ${{ env.IOS_APPSTORECONNECT_API_ISSUER }}
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ env.IOS_APPSTORECONNECT_API_KEY }}
          APP_STORE_CONNECT_PRIVATE_KEY: '@file:${{ env.APPSTORECONNECT_AUTH_KEY_PATH }}/AuthKey_${{ env.IOS_APPSTORECONNECT_API_KEY }}.p8'
        run: |
          BUNDLE_ID=${{ env.IOS_BUNDLE_ID }}
          APPLICATION_ID_RESOURCE_ID=${{ env.IOS_APP_APPLE_ID }}

          echo ${{ env.APP_STORE_CONNECT_PRIVATE_KEY }}
          python -m pip install codemagic-cli-tools

          LATEST_APPSTORE_BUILD_NUMBER=$(app-store-connect get-latest-build-number "$APPLICATION_ID_RESOURCE_ID" | awk '{print $1 + 1}')

          echo "LATEST_APPSTORE_BUILD_NUMBER=$LATEST_APPSTORE_BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "LATEST_APPSTORE_BUILD_NUMBER=$LATEST_APPSTORE_BUILD_NUMBER" >> $GITHUB_ENV

          app-store-connect get-latest-app-store-build-number "$APPLICATION_ID_RESOURCE_ID"
          app-store-connect get-latest-testflight-build-number "$APPLICATION_ID_RESOURCE_ID"

      - name: Updating Export.plist
        run: |
          cd ios/App
          sed -ie 's/IOS_DEVELOPMENT_TEAM_ID/${{ env.IOS_DEVELOPMENT_TEAM_ID }}/g' Export.plist
          sed -ie 's/IOS_BUNDLE_ID/${{ env.IOS_BUNDLE_ID }}/g' Export.plist
          sed -ie 's/MOBILE_PROVISIONING_UUID/${{ env.MOBILE_PROVISIONING_UUID }}/g' Export.plist

      - name: Configuring apps (using Trapeze)
        env:
          IOS_BUILD_NUMBER: ${{ env.LATEST_APPSTORE_BUILD_NUMBER }}
          IOS_BUNDLE_ID: ${{ env.IOS_BUNDLE_ID }}
          IOS_DEVELOPMENT_TEAM_ID: ${{ env.IOS_DEVELOPMENT_TEAM_ID }}
          VERSION: ${{ env.APP_VERSION }}
        run: |
          npm run config:apps

      - name: Generating Assets
        run: |
          npm run generate:assets

      # On Pre-Relase

      # On Relase
      - name: Build and archiving the app
        run: |
          cd ios/App
          xcodebuild -scheme App -archivePath ./Actions.xcarchive -configuration Release archive -workspace ./App.xcworkspace PROVISIONING_PROFILE="${{env.MOBILE_PROVISIONING_UUID}}"

      - name: Exporting archive for releasing to Appstore (.IPA)
        run: |
          cd ios/App
          xcodebuild -exportArchive -archivePath ./Actions.xcarchive -exportPath ./build -exportOptionsPlist ./Export.plist PROVISIONING_PROFILE="${{env.MOBILE_PROVISIONING_UUID}}"

      - name: Verifying build for releasing to Appstore (.IPA)
        run: |
          API_ISSUER=${{ env.IOS_APPSTORECONNECT_API_ISSUER }}
          API_KEY=${{ secrets.IOS_APPSTORECONNECT_API_KEY }}

          cd ios/App
          xcrun altool --validate-app -f "./build/Socious Wallet.ipa" -t ios --apiKey ${{ secrets.IOS_APPSTORECONNECT_API_KEY }} --apiIssuer ${{ env.IOS_APPSTORECONNECT_API_ISSUER }}

      - name: Upload bundle (.IPA) to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '${{ env.BUILDING_PATH }}'
          asset_name: Socious-Wallet-${{ github.event.release.tag_name }}.ipa
          tag: ${{ github.ref }}
          overwrite: true
          body: ${{ github.event.release.body }}

      - name: Clean up keychain and provisioning profile
        run: |
          security delete-keychain ${{ env.KEYCHAIN_PATH }}
          rm -rf ${{ env.MOBILE_PROVISIONING_PATH }}

  #       # if: ${{ always() }}

  deploy-appstore:
    name: Deploy to Apple Appstore
    runs-on: macos-latest
    if: github.event.release.prerelease != true
    needs: [build-ios]
    env:
      LATEST_APPSTORE_BUILD_NUMBER: ${{ needs.build-ios.outputs.LATEST_APPSTORE_BUILD_NUMBER }}
    steps:
      - uses: robinraju/release-downloader@v1.11
        with:
          latest: true
          fileName: Socious-Wallet-${{ github.event.release.tag_name }}.ipa

      - name: Extracting auth key file (Apple API)
        run: |
          KEY_PATH=${{ env.APPSTORECONNECT_AUTH_KEY_PATH }}
          API_KEY=${{ env.IOS_APPSTORECONNECT_API_KEY }}
          KEY_FILE_PATH=$KEY_PATH/AuthKey_$API_KEY.p8

          mkdir -p $KEY_PATH
          echo ${{ env.IOS_APPSTORECONNECT_AUTH_KEY_BASE64 }} | base64 --decode > $KEY_FILE_PATH

      - name: Releasing the build to Appstore (.IPA)
        run: |
          API_ISSUER=${{ env.IOS_APPSTORECONNECT_API_ISSUER }}
          API_KEY=${{ secrets.IOS_APPSTORECONNECT_API_KEY }}

          xcrun altool --upload-app -f ./Socious-Wallet-${{ github.event.release.tag_name }}.ipa -t ios --apiKey $API_KEY --apiIssuer $API_ISSUER
